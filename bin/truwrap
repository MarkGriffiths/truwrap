#! /usr/bin/env node
'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var util = require('util');
var yargs = _interopDefault(require('yargs'));
var getStdin = _interopDefault(require('get-stdin'));
var updateNotifier = _interopDefault(require('update-notifier'));
var commonTags = require('common-tags');
var string = require('@thebespokepixel/string');
var trucolor = require('trucolor');
var deepAssign = _interopDefault(require('deep-assign'));
var terminalFeatures = _interopDefault(require('term-ng'));
var columnify = _interopDefault(require('columnify'));
var osLocale = _interopDefault(require('os-locale'));
var verbosity = require('verbosity');
var meta = _interopDefault(require('@thebespokepixel/meta'));
var nSelector = require('@thebespokepixel/n-selector');
var ansiRegex = _interopDefault(require('ansi-regex'));
var fs = require('fs');
var path = require('path');
var _min = _interopDefault(require('lodash/min'));
var _max = _interopDefault(require('lodash/max'));
var _split = _interopDefault(require('lodash/split'));
var _forEach = _interopDefault(require('lodash/forEach'));

const name = "truwrap";
const version = "2.0.2";
const description = "Smarter terminal text wrapping (handles 24bit color)";
const author = "Mark Griffiths <mark@thebespokepixel.com> (http://thebespokepixel.com/)";
const main = "index.js";
const module$1 = "index.mjs";
const bin = {
	truwrap: "./bin/truwrap"
};
const files = [
	"index.js",
	"index.mjs",
	"bin/"
];
const bugs = {
	url: "https://github.com/thebespokepixel/truwrap/issues"
};
const copyright = {
	year: "2020",
	owner: "The Bespoke Pixel"
};
const scripts = {
	test: "xo && nyc ava",
	"generate-test-fixtures": "scripts/generate-test-fixtures",
	"generate-test-widths": "scripts/generate-test-widths",
	"doc-serve": "documentation serve --watch --theme node_modules/documentation-theme-bespoke --github --config src/docs/documentation.yml --project-name $npm_package_name  --project-version $npm_package_version src/index.js",
	"doc-build": "documentation build --format html --output docs --theme node_modules/documentation-theme-bespoke --github --config src/docs/documentation.yml --project-name $npm_package_name  --project-version $npm_package_version src/index.js",
	readme: "compile-readme -u src/docs/example.md src/docs/readme.md > readme.md",
	coverage: "nyc ava && nyc report --reporter=lcov --report-dir test/coverage; open test/coverage/lcov-report/index.html"
};
const devDependencies = {
	"@ava/babel": "^1.0.1",
	"@babel/core": "^7.8.4",
	"@babel/preset-env": "^7.8.4",
	ava: "^3.3.0",
	"babel-plugin-lodash": "^3.3.4",
	"documentation-theme-bespoke": "^1.1.3",
	gulp: "^4.0.2",
	"gulp-better-rollup": "^4.0.1",
	"gulp-chmod": "^3.0.0",
	"gulp-rename": "^2.0.0",
	nyc: "^15.0.0",
	rollup: "^1.31.1",
	"rollup-plugin-babel": "^4.3.3",
	"rollup-plugin-commonjs": "^10.1.0",
	"rollup-plugin-json": "^4.0.0",
	"rollup-plugin-node-resolve": "^5.2.0",
	"semver-regex": "^3.1.1",
	xo: "^0.26.1"
};
const dependencies = {
	"@thebespokepixel/meta": "^2.0.2",
	"@thebespokepixel/n-selector": "^2.0.1",
	"@thebespokepixel/string": "^1.0.1",
	"ansi-regex": "^5.0.0",
	columnify: "^1.5.4",
	"common-tags": "^1.8.0",
	"deep-assign": "^3.0.0",
	"es6-promisify": "^6.0.2",
	"get-stdin": "^7.0.0",
	lodash: "^4.17.15",
	"os-locale": "^4.0.0",
	"read-pkg-up": "^7.0.1",
	"term-ng": "^2.0.1",
	trucolor: "^2.0.1",
	"update-notifier": "^4.1.0",
	verbosity: "^2.0.1",
	yargs: "^15.1.0"
};
const engines = {
	node: ">=10.0"
};
const homepage = "https://github.com/thebespokepixel/truwrap";
const keywords = [
	"text",
	"wrap",
	"terminal",
	"tty",
	"iTerm",
	"xterm",
	"24bit",
	"SGR",
	"ansi"
];
const license = "MIT";
const repository = {
	type: "git",
	url: "git+https://github.com/thebespokepixel/truwrap.git"
};
const xo = {
	semicolon: false,
	esnext: true,
	ignores: [
		"index.js",
		"index.mjs",
		"bin",
		"docs",
		"test/coverage/**"
	]
};
const ava = {
	babel: true,
	files: [
		"test/*.js"
	]
};
const badges = {
	github: "thebespokepixel",
	npm: "thebespokepixel",
	name: "truwrap",
	codeclimate: "5732d1aad01d74b6ef4a",
	providers: {
		aux1: {
			title: "github",
			text: "source",
			color: "4E73B6",
			link: "https://github.com/thebespokepixel/truwrap"
		}
	},
	readme: {
		"Publishing Status": [
			[
				"npm",
				"david"
			],
			[
				"travis-com",
				"rollup"
			]
		],
		"Development Status": [
			[
				"greenkeeper",
				"travis-com-dev"
			],
			[
				"david-dev",
				"david-devdeps-dev"
			],
			[
				"snyk",
				"code-climate",
				"code-climate-coverage"
			]
		],
		"Documentation/Help": [
			"inch",
			"twitter"
		]
	},
	docs: [
		[
			"aux1",
			"travis"
		],
		[
			"code-climate",
			"code-climate-coverage"
		],
		[
			"snyk",
			"david"
		]
	]
};
var pkg = {
	name: name,
	version: version,
	description: description,
	author: author,
	main: main,
	module: module$1,
	bin: bin,
	files: files,
	bugs: bugs,
	copyright: copyright,
	scripts: scripts,
	devDependencies: devDependencies,
	dependencies: dependencies,
	engines: engines,
	homepage: homepage,
	keywords: keywords,
	license: license,
	repository: repository,
	xo: xo,
	ava: ava,
	badges: badges
};

const clr = deepAssign(trucolor.simple({
  format: 'sgr'
}), trucolor.palette({
  format: 'sgr'
}, {
  bright: 'bold rgb(255,255,255)',
  dark: '#333'
}));
const colorReplacer = new commonTags.TemplateTag(commonTags.replaceSubstitutionTransformer(/([a-zA-Z]+?)[:/|](.+)/, (match, colorName, content) => `${clr[colorName]}${content}${clr[colorName].out}`));

const tabRegex = /\t/g;
const newlineRegex = /\n/g;

class Tokeniser {
  constructor(tokenisingRegex) {
    this.tokenisingRegex = tokenisingRegex || function () {
      switch (renderMode.selected) {
        case 'keep':
          return /^.*$/mg;

        default:
          return /\S+\s+/g;
      }
    }();
  }

  process(source) {
    return source.replace(newlineRegex, '\u0000>/\\//__<\u0000').replace(tabRegex, '\u0000>T/\\B<\u0000').replace(ansiRegex(), '\u0000$&\u0000').replace(this.tokenisingRegex, '\u0000$&\u0000').split('\u0000').filter(token => token !== '');
  }

  restore(source) {
    return source.replace(/>\/\\\/\/__</g, '\n').trimRight();
  }

}

var createTokeniser = (tokenisingRegex => new Tokeniser(tokenisingRegex));

const newlineRegex$1 = /^>\/\\\/\/__<$/;
const tabRegex$1 = /^>T\/\\B<$/;

class LineFitter {
  constructor(options) {
    [this.margin, this.desiredWidth, this.tabWidth] = options;
    this.lineTokens = [this.margin];
    this.cursor = 0;
    this.lineBlock = false;
    console.debug('[Line]', '▸', this.cursor);
  }

  createTab() {
    const width = this.tabWidth - this.cursor % this.tabWidth || 4;
    this.cursor += width;
    console.debug('[TAB', width, ']', '▸', this.cursor);
    return ' '.repeat(width);
  }

  add(token) {
    if (newlineRegex$1.test(token)) {
      console.debug('[Newline]', '▸', this.cursor);
      return true;
    }

    if (ansiRegex().test(token)) {
      console.debug('[ANSI Token]', '▸', this.cursor);
      this.lineTokens.push(token);
      return false;
    }

    if (tabRegex$1.test(token)) {
      this.lineTokens.push(this.createTab());
      return false;
    }

    const overlap = this.cursor + token.trimRight().length - this.desiredWidth;

    switch (renderMode.selected) {
      case 'hard':
        if (overlap > 0) {
          const head = token.trimRight().substring(0, token.length - overlap);
          const tail = token.substring(token.length - overlap);
          this.lineTokens.push(head);
          this.cursor += head.length;
          console.debug('[Token][Head]', head, '▸', this.cursor);
          console.debug('[Token][Tail]', tail);
          return tail === ' ' ? '' : tail;
        }

        this.lineTokens.push(token);
        this.cursor += token.length;
        console.debug('[Token]', token, '▸', this.cursor);
        return false;

      case 'keep':
        this.lineTokens.push(token);
        this.cursor += token.length;
        console.debug('[Token]', token, '▸', this.cursor);
        return false;

      default:
        if (overlap > 0) {
          if (this.cursor > 0) {
            return token;
          }
        }

        this.lineTokens.push(token);
        this.cursor += token.length;
        console.debug('[Token]', token, '▸', this.cursor);
        return false;
    }
  }

  toString() {
    return this.lineTokens.join('');
  }

}

var createLineFitter = ((margin, width, tabWidth) => new LineFitter([margin, width, tabWidth]));

class WrapTool {
  constructor({
    left,
    width,
    tabWidth,
    tokenRegex
  }) {
    this.margin = ' '.repeat(left);
    this.desiredWidth = width;
    this.tabWidth = tabWidth;
    this.tokeniser = createTokeniser(tokenRegex);
  }

  wrap(text) {
    this.lines = [];
    const tokens = this.tokeniser.process(text);
    let currentLine = createLineFitter(this.margin, this.desiredWidth, this.tabWidth);

    while (tokens.length) {
      const overflow = currentLine.add(tokens.shift());

      if (overflow) {
        this.lines.push(currentLine.toString());
        console.debug('Line complete:', currentLine.toString());
        currentLine = createLineFitter(this.margin, this.desiredWidth, this.tabWidth);

        if (overflow !== true && overflow !== false) {
          console.debug('╰ Overflow:', overflow);
          tokens.unshift(overflow);
        }
      }
    }

    this.lines.push(currentLine.toString());
    return this.lines.map(this.tokeniser.restore).join('\n');
  }

}

var createWrapTool = (options => new WrapTool(options));

const prefix = '\u001B]1337;File=inline=1;';
const suffix = '\u0007';
const broken = `${__dirname}/../media/broken.png`;

class Image {
  constructor({
    file,
    name,
    width = 'auto',
    height = 'auto'
  }) {
    const extName = path.extname(file);
    const fileName = name || path.basename(file, extName);
    const lineNameBase64 = Buffer.from(fileName).toString('base64');
    this.config = `width=${width};height=${height};name=${lineNameBase64}`;

    this.filePath = function () {
      try {
        if (fs.statSync(file).isFile()) {
          return file;
        }
      } catch (error) {
        switch (error.code) {
          case 'ENOENT':
            console.warn('Warning:', `${file} not found.`);
            break;

          default:
            console.error(error);
        }

        return broken;
      }
    }();
  }

  render(options) {
    const {
      align,
      stretch = false,
      nobreak
    } = options;
    const content = Buffer.from(fs.readFileSync(this.filePath));
    const aspect = stretch ? 'preserveAspectRatio=0;' : '';
    const linebreak = nobreak ? '' : '\n';
    const newline = align > 1 ? `\u001BH\u001B[${align}A` : linebreak;
    return `${prefix}${aspect}size=${content.length}${this.config}:${content.toString('base64')}${suffix}${newline}`;
  }

}

var createImage = (source => new Image(source));

function parsePanel (buffer_, delimiter_, width_) {
  let longIdx = 0;
  let maxCols = 0;
  const spacerCols = [];
  const tableData = [];

  _forEach(_split(buffer_.trim(), '\n'), (row, rowIdx) => {
    const columnData = {};

    _forEach(_split(row, delimiter_), (col, colIdx) => {
      if (col === ':space:') {
        spacerCols.push(colIdx);
        columnData[`spacer${colIdx}`] = ' ';
      } else if (spacerCols.includes(colIdx)) {
        columnData[`spacer${colIdx}`] = ' ';
      } else {
        columnData[`c${colIdx}`] = col;
      }

      if (colIdx > maxCols) {
        maxCols = colIdx;
        longIdx = rowIdx;
      }
    });

    tableData.push(columnData);
  });

  const setSpacer = (spacerSize, min) => _max([Math.floor((width_ - spacerCols.length * spacerSize) / (maxCols - spacerCols.length + 1)), min]) - 1;

  const configuration = {};
  const max = setSpacer(16, 5);
  const min = setSpacer(4, 3);
  Object.keys(tableData[longIdx]).forEach(idx => {
    if (idx.includes('spacer')) {
      configuration[idx] = {
        maxWidth: 16,
        minWidth: 4
      };
    } else {
      configuration[idx] = {
        maxWidth: _max([min, max]),
        minWidth: _min([min, max])
      };
    }
  });
  return {
    content: tableData,
    configuration
  };
}

const console = verbosity.createConsole({
  outStream: process.stderr
});
const locale = osLocale.sync();
const metadata = meta(__dirname);
const renderMode = nSelector.createSelector(['soft', 'hard', 'keep', 'container'], 0, 'configuration_mode');

function unimplemented() {
  throw new Error('Unimplemented.');
}

function truwrap({
  left = 2,
  right = 2,
  width,
  mode = 'soft',
  tabWidth = 4,
  outStream = process.stdout,
  tokenRegex
}) {
  const ttyActive = Boolean(width || outStream.isTTY || /keep|container/.test(mode));

  const ttyWidth = function () {
    if (width) {
      return width;
    }

    if (outStream.isTTY) {
      return outStream.columns || outStream.getWindowSize()[0];
    }

    return Infinity;
  }();

  const viewWidth = function () {
    if (ttyWidth - left - right > 1) {
      return ttyWidth - left - right;
    }

    return 2;
  }();

  renderMode.select(mode);

  const viewHandler = function () {
    if (ttyActive && mode !== 'container') {
      return createWrapTool({
        left,
        width: viewWidth,
        tabWidth,
        tokenRegex
      });
    }

    return {};
  }();

  const api = {
    end() {
      if (outStream._isStdio) {
        outStream.write('\n');
      } else {
        outStream.end();
      }
    },

    getWidth: unimplemented,

    panel(content, configuration) {
      if (outStream._isStdio) {
        outStream.write(columnify(content, configuration));
      }

      return this;
    },

    break(newlines = 1) {
      outStream.write('\n'.repeat(newlines));
      return this;
    },

    clear() {
      outStream.write('\n');
      return this;
    },

    write(text) {
      outStream.write(text);
      return this;
    }

  };

  switch (true) {
    case !ttyActive:
      console.info(colorReplacer`${'yellow|Non-TTY'}: width: Infinity`);
      return Object.assign(Object.create(api), {
        getWidth: () => ttyWidth
      });

    case renderMode.selected === 'container':
      console.info(`Container: width: ${width}, render mode: ${renderMode.selected}`);
      return Object.assign(Object.create(api), {
        getWidth: () => ttyWidth
      });

    default:
      console.info(commonTags.stripIndent(colorReplacer)`
				${'green|Renderer'}:
				  mode ▸ ${renderMode.selected} [${locale}]
				  ┆ ${left} ◂├╌╌╌╌ ${viewWidth} ╌╌╌╌┤▸ ${right} ┆
			`, '\n');
      return Object.assign(Object.create(api), {
        getWidth: () => viewWidth,

        panel(content, configuration) {
          outStream.write(viewHandler.wrap(columnify(content, configuration)));
          return this;
        },

        write(text) {
          outStream.write(viewHandler.wrap(text));
          return this;
        }

      });
  }
}

const images = function () {
  if (terminalFeatures.images) {
    return {
      space: '\t',
      cc: createImage({
        name: 'logo',
        file: `${__dirname}/../media/CCLogo.png`,
        height: 3
      })
    };
  }

  return {
    space: '',
    cc: {
      render: () => ''
    }
  };
}();

function help(yargs) {
  const header = () => commonTags.stripIndent(colorReplacer)`
		${`title|${metadata.name}`}
		${images.space}${metadata.description}
		${images.space}${`grey|${metadata.version(3)}`}
	`;

  const synopsis = commonTags.stripIndent(colorReplacer)`
		${'title|Synopsis:'}
		${'command|cat'} ${'argument|inputFile'} ${'operator:|'} ${`command|${metadata.bin}`} ${'option|[options]'}
	`;
  const usage = commonTags.stripIndent(colorReplacer)`
		${'title|Usage:'}
		Reads unformatted text from stdin and typographically applies paragraph wrapping it for the currently active tty.
	`;
  const epilogue = commonTags.stripIndent(colorReplacer)`
		${`title|${metadata.name}`} ${`white|${metadata.copyright}`}. ${`grey|Released under the ${metadata.license} License.`}
		${`grey|Issues?: ${metadata.bugs}`}
	`;
  const container = truwrap({
    mode: 'container',
    outStream: process.stderr
  });
  const windowWidth = container.getWidth();
  const renderer = truwrap({
    left: 2,
    right: 0,
    outStream: process.stderr
  });
  const contentWidth = renderer.getWidth();
  yargs.wrap(contentWidth);
  container.break();
  container.write(images.cc.render({
    nobreak: false,
    align: 2
  }));
  container.write(header()).break();
  container.write(`${clr.dark}${'—'.repeat(windowWidth)}${clr.dark.out}`).break();
  renderer.write(synopsis).break(2);
  renderer.write(yargs.getUsageInstance().help()).break();
  renderer.write(usage).break(2);
  container.write(`${clr.dark}${'—'.repeat(windowWidth)}${clr.dark.out}`);
  renderer.write(epilogue).end();
}

yargs.strict().help(false).version(false).options({
  h: {
    alias: 'help',
    describe: 'Display this help.'
  },
  v: {
    alias: 'version',
    count: true,
    describe: 'Return the current version on stdout. -vv Return name & version.'
  },
  V: {
    alias: 'verbose',
    count: true,
    describe: 'Be verbose. -VV Be loquacious.'
  },
  o: {
    alias: 'stderr',
    boolean: true,
    describe: 'Use stderr rather than stdout',
    default: false
  },
  l: {
    alias: 'left',
    describe: 'Left margin',
    requiresArg: true,
    default: 2
  },
  r: {
    alias: 'right',
    describe: 'Right margin',
    requiresArg: true,
    default: 2
  },
  w: {
    alias: 'width',
    describe: 'Set total width. Overrides terminal window’s width.',
    requiresArg: true,
    nargs: 1
  },
  t: {
    alias: 'tab',
    describe: 'Set tab width.',
    requiresArg: true,
    default: 2
  },
  m: {
    alias: 'mode',
    choices: ['hard', 'soft', 'keep', 'container'],
    describe: 'Wrapping mode',
    default: 'soft',
    requiresArg: true
  },
  s: {
    alias: 'stamp',
    boolean: true,
    describe: 'Print arguments rather than stdin. printf-style options supported.'
  },
  p: {
    alias: 'panel',
    boolean: true,
    describe: 'Render a tabular panel into the available console width.'
  },
  c: {
    alias: 'truncate',
    boolean: true,
    describe: 'Truncate panel cells.'
  },
  d: {
    alias: 'delimiter',
    describe: 'The column delimiter when reading data for a panel.',
    requiresArg: true,
    default: '|'
  },
  x: {
    alias: 'regex',
    describe: 'Character run selection regex.',
    requiresArg: true
  },
  color: {
    describe: 'Force color depth --color=256|16m. Disable with --no-color'
  }
}).showHelpOnFail(false, `Use 'truwrap --help' for help.`);
const {
  argv
} = yargs;
const outStream = argv.stderr ? process.stderr : process.stdout;

if (argv.version) {
  process.stdout.write(`${metadata.version(argv.version)}\n`);
  process.exit(0);
}

if (argv.verbose) {
  const settings = {
    borderColor: 'green',
    margin: {
      bottom: 1,
      top: 1
    },
    padding: {
      bottom: 0,
      top: 0,
      left: 2,
      right: 2
    }
  };

  const titling = mode => commonTags.stripIndent(colorReplacer)`
		${`title|${metadata.name}`}${`dim| │ v${metadata.version()}`}
		Mode: ${mode}
	`;

  switch (argv.verbose) {
    case 1:
      console.verbosity(4);
      console.log(string.box(titling('Verbose'), settings));
      break;

    case 2:
      console.verbosity(5);
      console.log(string.box(titling('Some might say loquacious'), settings));
      console.yargs(argv);
      console.debug('');
      break;

    default:
      console.verbosity(3);
  }
}

if (!(process.env.USER === 'root' && process.env.SUDO_USER !== process.env.USER)) {
  updateNotifier({
    pkg
  }).notify();
}

if (argv.help) {
  help(yargs);
  process.exit(0);
}

const viewSettings = {
  left: argv.left,
  right: argv.right,
  mode: argv.mode,
  tabWidth: argv.tab,
  outStream
};

if (argv.regex) {
  viewSettings.tokenRegex = new RegExp(argv.regex, 'g');
}

if (argv.width) {
  viewSettings.width = argv.width;
}

const renderer = truwrap(viewSettings);

if (argv.stamp) {
  renderer.write(util.format(...argv._));
  process.exit(0);
}

getStdin().then(input => {
  if (argv.panel) {
    const panel = parsePanel(input, argv.delimiter, renderer.getWidth());
    renderer.panel(panel.content, {
      maxLineWidth: renderer.getWidth(),
      showHeaders: false,
      truncate: argv.truncate,
      config: panel.configuration
    });
  } else {
    renderer.write(input);
  }
});
